{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Nrf2_motif search.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Greedy Motif Search "
      ],
      "metadata": {
        "id": "L-o71kOXrOcq"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "0wXQVt_Qq2TY"
      },
      "outputs": [],
      "source": [
        "def profileMostProbableKmer(Dna, k, profile): # Returns the profile most probable k-mer for the given input data.\n",
        "    nucLoc = {nucleotide: index for index, nucleotide in enumerate('ACGT')} # A dictionary relating nucleotides to their position within the profile.\n",
        "    # Initialize the maximum probabily.\n",
        "    maxProbability = -1\n",
        "    # Compute the probability of the each k-mer, store it if it's currently a maximum.\n",
        "    for i in range(len(Dna) - k + 1):\n",
        "        # Get the current probability.\n",
        "        currentProbability = 1\n",
        "        for j, nucleotide in enumerate(Dna[i:i + k]):\n",
        "            currentProbability *= profile[j][nucLoc[nucleotide]]\n",
        "\n",
        "        # Check for a maximum.\n",
        "        if currentProbability > maxProbability:\n",
        "            maxProbability = currentProbability\n",
        "            mostProbable = Dna[i:i + k]\n",
        "\n",
        "    return mostProbable"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def profile(motifs):\n",
        "    # Returns the profile of the dna list motifs.\n",
        "    columns = [''.join(seq) for seq in zip(*motifs)]\n",
        "    return [[float(col.count(nuc)) / float(len(col)) for nuc in 'ACGT'] for col in columns]"
      ],
      "metadata": {
        "id": "fpiroADdrEAa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def greedyMotifSearchAlgorithm(Dna, k, t):\n",
        "    # Initialize the best score as a score higher than the highest possible score.\n",
        "    bestScore = k * t\n",
        "    # Run the greedy motif search.\n",
        "    for i in range(len(Dna[0]) - k + 1):\n",
        "        # Initialize the motifs as each k-mer from the first dna sequence.\n",
        "        motifs = [Dna[0][i:i + k]]\n",
        "        # Find the most probable k-mer in the next string.\n",
        "        for j in range(1, t):\n",
        "            currentProfile = profile(motifs)\n",
        "            motifs.append(profileMostProbableKmer(Dna[j], k, currentProfile))\n",
        "        # Check to see if we have a new best scoring list of motifs.\n",
        "        currentScore = score(motifs)\n",
        "        if currentScore < bestScore:\n",
        "            bestScore = currentScore\n",
        "            bestMotifs = motifs\n",
        "    return bestMotifs"
      ],
      "metadata": {
        "id": "74DGVzWmrJ0v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def score_motif(motifs):\n",
        "    # Returns the score of the given list of motifs.\n",
        "    columns = [''.join(seq) for seq in zip(*motifs)]\n",
        "    maxCount = sum([max([c.count(nucleotide) for nucleotide in 'ACGT']) for c in columns])\n",
        "    return len(motifs[0]) * len(motifs) - maxCount"
      ],
      "metadata": {
        "id": "mpMKxHYXrAC3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == '__main__':\n",
        "\n",
        "    with open(\"bio.txt\",\"r\") as file:\n",
        "        kt = next(file).strip().split()\n",
        "        k = int(kt[0])\n",
        "        t = int(kt[1])\n",
        "        genomes = []\n",
        "        for i in range(t):\n",
        "            genomes.append(next(file).strip())\n",
        "        kmers = greedyMotifSearchAlgorithm(genomes, k, t)\n",
        "        print('\\n'.join(str(x) for x in kmers))"
      ],
      "metadata": {
        "id": "kuh2xBtlq8QG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Random Motif Search "
      ],
      "metadata": {
        "id": "cVwnxdlgrZJt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# RandomizedMotifSearch\n",
        "import random\n",
        "def randomkmers(dna, k):\n",
        "    motifs = []\n",
        "    for one in dna:\n",
        "        pos = random.randrange(0, len(dna[0]) - k + 1)\n",
        "        motifs.append(one[pos:pos + k])\n",
        "    return motifs\n"
      ],
      "metadata": {
        "id": "7Y5OS7H-rdYU"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# creating the best motif and comparing with the other motifs to find the best one\n",
        "def randomizedmotifsearch(dna, k, t):\n",
        "    motifs = randomkmers(dna, k)\n",
        "    \n",
        "    while best == motifs:\n",
        "        profile_matrix = motifsToProfile(motifs)\n",
        "        motifs = []\n",
        "        for m in range(t):\n",
        "            motifs.append(profileMostProbablekmer(dna[m], k, profile_matrix))\n",
        "        if score(motifs) < score(best):\n",
        "            best = motifs\n",
        "        else:\n",
        "            return best"
      ],
      "metadata": {
        "id": "0euoOoY_ry2r"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# counting the number of times each kmers appears in the dna  and returning the most frequent one\n",
        "def score(motifs):\n",
        "    z = zip(*motifs)\n",
        "    final_score = 0\n",
        "    for string in z:\n",
        "    # for finding score in sequence we have to subtract most frequent Nucleotide and length of sequence\n",
        "\n",
        "        score = len(string) - max([string.count('A'), string.count('C'), string.count('G'), string.count('T')])\n",
        "        final_score += score\n",
        "    return final_score\n",
        "def motifsToProfile(motifs):  # creating an profile matrix for the count of motifs\n",
        "    d = {}\n",
        "    n = float(len(motifs))\n",
        "    z = list(zip(*motifs))\n",
        "    for i in range(len(z)):\n",
        "        d.setdefault('A', []).append((z[i].count('A') + 1) / n / 2)\n",
        "        d.setdefault('C', []).append((z[i].count('C') + 1) / n / 2)\n",
        "        d.setdefault('G', []).append((z[i].count('G') + 1) / n / 2)\n",
        "        d.setdefault('T', []).append((z[i].count('T') + 1) / n / 2)\n",
        "    return d"
      ],
      "metadata": {
        "id": "_qZyeww4r8Is"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def profileMostProbablekmer(text, k, matrix):\n",
        "    maxp = None\n",
        "    probable_kmer = None\n",
        "    for i in range(len(text) - k + 1):\n",
        "        kmer = text[i:i + k]\n",
        "        pt = 1\n",
        "        for j in range(k):\n",
        "            p = matrix[kmer[j]][j]\n",
        "            pt *= p\n",
        "        if maxp == None or pt > maxp:\n",
        "            maxp = pt\n",
        "            probable_kmer = kmer\n",
        "    return probable_kmer"
      ],
      "metadata": {
        "id": "7BhZUaFmsIQZ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def runrandomtimes(dna, k, t, times):\n",
        "    bestmotifs_list = []\n",
        "    highscore = None\n",
        "    for i in range(int(times)):\n",
        "        tempmotifs = randomizedmotifsearch(dna, k, t)\n",
        "        tempscore = score(tempmotifs)\n",
        "        if highscore == None or highscore > tempscore:\n",
        "            highscore = tempscore\n",
        "            bestmotifs_list = tempmotifs\n",
        "    return bestmotifs_list\n",
        "\n",
        "try:\n",
        "    with open('Bio.txt','r') as f:\n",
        "        k, t = map(int, f.readline().rstrip().split(' '))\n",
        "        strings = [st.rstrip() for st in f.readlines()]\n",
        "    print('\\n'.join(runrandomtimes(strings, k, t, 1000)))\n",
        "except:\n",
        "    print(\"invalid file type\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rrK2MYOwsAJp",
        "outputId": "d8ee09e1-2ae7-4b65-b7af-a47968cf04aa"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CCGACAAAGACAGAT\n",
            "AACGGAAAAAGGCGA\n",
            "AGCTGACAAAGAGAT\n",
            "AGCAGGGATATTGAA\n",
            "AGGAAAGAGATTGGA\n",
            "AACGGAGAACCACAC\n",
            "ACAAGAGAAAGGGAA\n",
            "CAGAATGAGCCAGAA\n",
            "AACATAGAAGAGAAA\n",
            "AACTGAAACATGGAT\n",
            "ACCATAGGAACGACA\n",
            "TGCATAGGAATGTCA\n",
            "AACATGGAAGCTGTG\n",
            "CTGATAAAAACAGAA\n",
            "AACACAACAACAGAA\n",
            "GACAGAGGATGGGGA\n",
            "AACATGGAAGGAAAA\n",
            "AACATGGCAAGGAAA\n",
            "ATCACAGAAGCAGAA\n",
            "CAGATGGAAAATAAA\n"
          ]
        }
      ]
    }
  ]
}
